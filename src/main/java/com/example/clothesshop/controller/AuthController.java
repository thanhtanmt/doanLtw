package com.example.clothesshop.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.clothesshop.dto.UserRegistrationDto;
import com.example.clothesshop.service.UserService;
import com.example.clothesshop.service.EmailService;
import com.example.clothesshop.model.User;

import jakarta.mail.MessagingException;
import jakarta.validation.Valid;
import java.time.LocalDateTime;
import java.util.Random;
import org.springframework.security.core.Authentication;

@Controller
@SessionAttributes("pendingUser")
public class AuthController {
	private final UserService userService;
	private final EmailService emailService;

	public AuthController(UserService userService, EmailService emailService) {
		this.userService = userService;
		this.emailService = emailService;
	}

	@ModelAttribute("pendingUser")
	public UserRegistrationDto pendingUser() {
		return new UserRegistrationDto();
	}

	@GetMapping("/login")
	public String loginPage(Authentication authentication,
							@RequestParam(value = "redirect", required = false) String redirect) {
		// N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, kh√¥ng cho v√†o trang login, chuy·ªÉn v·ªÅ home
		if (authentication != null && authentication.isAuthenticated()
				&& authentication.getPrincipal() != null
				&& !"anonymousUser".equals(authentication.getPrincipal())) {
			return "redirect:/";
		}
		return "login";
	}

	@GetMapping("/register")
	public String showRegisterForm(Model model) {
		model.addAttribute("userDto", new UserRegistrationDto());
		return "register";
	}

	@PostMapping("/register")
	public String registerUser(@Valid @ModelAttribute("userDto") UserRegistrationDto userDto, BindingResult result,
			Model model, RedirectAttributes redirectAttributes) {
		System.out.println("==> registerUser() ƒë∆∞·ª£c g·ªçi v·ªõi email: " + userDto.getEmail());
		System.out.println("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëƒÉng k√Ω...");

		if (!userDto.getPassword().equals(userDto.getConfirmPassword())) {
			System.out.println("‚ö†Ô∏è M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
			result.rejectValue("confirmPassword", "error.user", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
		}

		if (userService.findByEmail(userDto.getEmail()) != null) {
			System.out.println("‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i: " + userDto.getEmail());
			result.rejectValue("email", "error.user", "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
		}

		if (result.hasErrors()) {
			System.out.println("‚ö†Ô∏è C√≥ l·ªói validate form -> quay l·∫°i trang register");
			return "register";
		}

		try {
			System.out.println("‚úÖ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëƒÉng k√Ω m·ªõi...");
			String verificationCode = generateVerificationCode();
			System.out.println("üì® M√£ x√°c th·ª±c ƒë∆∞·ª£c t·∫°o: " + verificationCode);

			// L∆∞u th√¥ng tin ƒëƒÉng k√Ω v√†o session (s·ª≠ d·ª•ng @SessionAttributes)
			userDto.setVerificationCode(verificationCode);
			userDto.setVerificationCodeExpiry(LocalDateTime.now().plusMinutes(15));
			model.addAttribute("pendingUser", userDto);

			System.out.println("üì¨ Chu·∫©n b·ªã g·ª≠i email x√°c th·ª±c...");
			emailService.sendVerificationEmail(userDto.getEmail(), verificationCode);
			System.out.println("‚úÖ Email x√°c th·ª±c ƒë√£ g·ª≠i th√†nh c√¥ng!");

			return "redirect:/verify-email?email=" + userDto.getEmail();
		} catch (MessagingException e) {
			System.out.println("‚ùå L·ªói g·ª≠i email: " + e.getMessage());
			result.reject("error.email", "Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.");
			return "register";
		} catch (Exception e) {
			System.out.println("üí• L·ªói b·∫•t ng·ªù khi ƒëƒÉng k√Ω: " + e.getMessage());
			e.printStackTrace();
			result.reject("error.user", "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.");
			return "register";
		}
	}

	@GetMapping("/verify-email")
	public String showVerificationForm(@RequestParam(required = false) String email, Model model) {
		if (email == null || email.isEmpty()) {
			return "redirect:/login";
		}
		model.addAttribute("email", email);
		return "verify-email";
	}

	@PostMapping("/verify-email")
	public String verifyEmail(@RequestParam String email, @RequestParam String code,
			@ModelAttribute("pendingUser") UserRegistrationDto pendingUser, Model model, SessionStatus sessionStatus) {
		// Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
		if (userService.findByEmail(email) != null) {
			model.addAttribute("error", "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω");
			return "verify-email";
		}

		// Ki·ªÉm tra th√¥ng tin x√°c th·ª±c trong session
		if (!email.equals(pendingUser.getEmail())) {
			model.addAttribute("error", "Email kh√¥ng kh·ªõp v·ªõi th√¥ng tin ƒëƒÉng k√Ω");
			return "verify-email";
		}

		if (pendingUser.getVerificationCodeExpiry().isBefore(LocalDateTime.now())) {
			model.addAttribute("error", "M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n");
			return "verify-email";
		}

		if (!pendingUser.getVerificationCode().equals(code)) {
			model.addAttribute("error", "M√£ x√°c th·ª±c kh√¥ng ch√≠nh x√°c");
			return "verify-email";
		}

		// T·∫°o v√† l∆∞u user m·ªõi v√†o database
		try {
			User user = userService.registerNewUser(pendingUser);
			user.setEmailVerified(true);
			user.setEnabled(true);
			userService.save(user);

			// X√≥a th√¥ng tin t·∫°m trong session
			sessionStatus.setComplete();

			return "redirect:/login?verified=true";
		} catch (Exception e) {
			model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi t·∫°o t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.");
			return "verify-email";
		}
	}

	@PostMapping("/resend-verification")
	public String resendVerification(@RequestParam String email,
			@ModelAttribute("pendingUser") UserRegistrationDto pendingUser, Model model) {
		// N·∫øu user ƒë√£ t·ªìn t·∫°i trong DB
		User user = userService.findByEmail(email);

		if (user != null) {
			if (user.isEmailVerified()) {
				model.addAttribute("error", "Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c");
				return "verify-email";
			}

			String verificationCode = generateVerificationCode();
			user.setVerificationCode(verificationCode);
			user.setVerificationCodeExpiry(LocalDateTime.now().plusMinutes(15));
			userService.save(user);

			try {
				System.out.println("üì¨ Chu·∫©n b·ªã g·ª≠i email x√°c th·ª±c...");
				emailService.sendVerificationEmail(user.getEmail(), verificationCode);
				System.out.println("‚úÖ Email x√°c th·ª±c ƒë√£ g·ª≠i th√†nh c√¥ng!");
				model.addAttribute("message", "M√£ x√°c th·ª±c m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n");
			} catch (MessagingException e) {
				model.addAttribute("error", "Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.");
			}

			return "verify-email";
		}

		// N·∫øu user ch∆∞a ƒë∆∞·ª£c l∆∞u (th√¥ng tin ƒëang ·ªü session pendingUser)
		if (pendingUser != null && email.equals(pendingUser.getEmail())) {
			String verificationCode = generateVerificationCode();
			pendingUser.setVerificationCode(verificationCode);
			pendingUser.setVerificationCodeExpiry(LocalDateTime.now().plusMinutes(15));

			try {
				System.out.println("üì¨ Chu·∫©n b·ªã g·ª≠i email x√°c th·ª±c (pending)...");
				emailService.sendVerificationEmail(pendingUser.getEmail(), verificationCode);
				System.out.println("‚úÖ Email x√°c th·ª±c ƒë√£ g·ª≠i th√†nh c√¥ng!");
				model.addAttribute("message", "M√£ x√°c th·ª±c m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n");
			} catch (MessagingException e) {
				model.addAttribute("error", "Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.");
			}

			return "verify-email";
		}

		model.addAttribute("error", "Email kh√¥ng t·ªìn t·∫°i");
		return "verify-email";
	}

	private String generateVerificationCode() {
		Random random = new Random();
		int code = 100000 + random.nextInt(900000); // generates 6-digit code
		return String.valueOf(code);
	}

	@GetMapping("/seller/register")
	public String sellerRegister(Model model) {
		model.addAttribute("user", new UserRegistrationDto());
		return "seller-register";
	}

	@GetMapping("/forgot-password")
	public String showForgotPasswordForm() {
		return "forgot-password";
	}

	@PostMapping("/forgot-password")
	public String processForgotPassword(@RequestParam String email, Model model, RedirectAttributes redirectAttributes) {
		User user = userService.findByEmail(email);
		
		if (user == null) {
			model.addAttribute("error", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng");
			return "forgot-password";
		}
		
		try {
			// T·∫°o m√£ x√°c th·ª±c
			String verificationCode = generateVerificationCode();
			user.setVerificationCode(verificationCode);
			user.setVerificationCodeExpiry(LocalDateTime.now().plusMinutes(15));
			userService.save(user);
			
			// G·ª≠i email v·ªõi m√£ x√°c th·ª±c
			emailService.sendPasswordResetEmail(email, verificationCode);
			
			redirectAttributes.addFlashAttribute("message", "M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n");
			redirectAttributes.addFlashAttribute("email", email);
			return "redirect:/reset-password?email=" + email;
		} catch (MessagingException e) {
			model.addAttribute("error", "Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.");
			return "forgot-password";
		}
	}

	@GetMapping("/reset-password")
	public String showResetPasswordForm(@RequestParam String email, Model model) {
		model.addAttribute("email", email);
		return "reset-password";
	}

	@PostMapping("/reset-password")
	public String processResetPassword(
			@RequestParam String email,
			@RequestParam String code,
			@RequestParam String password,
			@RequestParam String confirmPassword,
			Model model,
			RedirectAttributes redirectAttributes) {
		
		if (!password.equals(confirmPassword)) {
			model.addAttribute("error", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
			model.addAttribute("email", email);
			return "reset-password";
		}
		
		User user = userService.findByEmail(email);
		if (user == null) {
			model.addAttribute("error", "Email kh√¥ng t·ªìn t·∫°i");
			return "reset-password";
		}
		
		if (user.getVerificationCode() == null || !user.getVerificationCode().equals(code)) {
			model.addAttribute("error", "M√£ x√°c th·ª±c kh√¥ng ch√≠nh x√°c");
			model.addAttribute("email", email);
			return "reset-password";
		}
		
		if (user.getVerificationCodeExpiry().isBefore(LocalDateTime.now())) {
			model.addAttribute("error", "M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n");
			model.addAttribute("email", email);
			return "reset-password";
		}
		
		// C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
		user.setPassword(password); // Raw password, s·∫Ω ƒë∆∞·ª£c encode trong save()
		user.setVerificationCode(null);
		user.setVerificationCodeExpiry(null);
		userService.save(user);
		
		redirectAttributes.addFlashAttribute("message", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p.");
		return "redirect:/login?reset=true";
	}
}
